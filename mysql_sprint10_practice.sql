use modelcarsdb;
-- ----------TASK1------------
-- TASK1_1  Find the total number of employees.
SELECT COUNT(*) as total_employees FROM employees;

-- TASK1_2 List all employees with their basic information.
SELECT * FROM employees;

-- TASK1_3 Count the number of employees holding each job title.
SELECT jobTitle,COUNT(*) FROM employees
GROUP BY jobTitle;

-- TASK1_4 Find the employees who don't have a manager (reports To is NULL).
SELECT employeeNumber, firstName, lastName, jobTitle
FROM employees
WHERE reportsTo IS NULL;
    
SELECT * FROM EMPLOYEES;
-- TASK1_5 Calculate total sales generated by each sales representative
SELECT salesRepEmployeeNumber,SUM(quantityOrdered * priceEach) AS totalSales from customers
join orders using(customerNumber)
join orderdetails using(orderNumber)
group by 1
order by 1;

-- TASK1_6 Find the most profitable sales representative based on total sales.
SELECT o.orderNumber,SUM(od.quantityOrdered * od.priceEach) AS totalSales,SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS totalProfit
FROM orders o
JOIN orderdetails od ON o.orderNumber = od.orderNumber
JOIN products p ON od.productCode = p.productCode
GROUP BY o.orderNumber
ORDER BY totalSales DESC, totalProfit DESC;


-- TASK1_7
SELECT * FROM EMPLOYEES;

--  ------------------TASK2-----------------
-- TASK2_1 Find the average order amount for each customer

SELECT customerName, AVG(quantityOrdered * priceEach) AS averageOrderAmount
FROM customers 
JOIN orders using(customerNumber)
JOIN orderdetails using(orderNumber)
GROUP BY customerName;

-- TASK2_2 Find the number of orders placed in each month.
 
SELECT MONTH(orderDate) AS orderMonth,COUNT(orderNumber) AS numberOfOrders FROM orders
GROUP BY MONTH(orderDate);

-- TASK2_3  Identify orders that are still pending shipment (status = 'Pending').
SELECT orderNumber, STATUS FROM orders
WHERE STATUS = 'In Process';

-- TASK2_4List orders along with customer details
SELECT o.orderNumber, o.orderDate, o.requiredDate, o.shippedDate, o.status, c.customerNumber, c.customerName, c.contactLastName, c.contactFirstName, c.phone, 
    c.addressLine1, 
    c.addressLine2, 
    c.city, 
    c.state, 
    c.postalCode, 
    c.country
FROM orders o
JOIN customers c ON o.customerNumber = c.customerNumber
ORDER BY o.orderNumber;

-- TASK2_5 Retrieve the most recent orders (based on order date).
SELECT orderNumber,date(orderDate) from orders
order by 2 desc;

-- TASK2_6  Calculate total sales for each order
select o.ordernumber,sum(od.quantityordered * od.priceeach) as totalsales from orders o
join orderdetails od on o.ordernumber = od.ordernumber
group by o.ordernumber;

-- TASK2_7 Find the highest-value order based on total sales
select o.ordernumber,sum(od.quantityordered * od.priceeach) as totalsales from orders o
join orderdetails od on o.ordernumber = od.ordernumber
group by o.ordernumber
order by totalsales desc
limit 1;
     
--  TASK2_8 List all orders with their corresponding order details
SELECT o.orderNumber,o.orderDate,od.productCode,od.quantityOrdered,od.priceEach,od.orderLineNumber
FROM orders o
JOIN orderdetails od  ON o.orderNumber = od.orderNumber;

-- TASK2_9 List the most frequently ordered products

SELECT p.productName, COUNT(od.productCode) AS orderCount
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY p.productName
ORDER BY orderCount DESC
limit 1;

-- TASK2_10 Calculate total revenue for each order.
SELECT od.orderNumber,SUM(od.quantityOrdered * od.priceEach) AS totalRevenue
FROM orderdetails od
GROUP BY od.orderNumber
ORDER BY totalRevenue DESC;

-- TASK2_11 Identify the most profitable orders based on total revenue.
SELECT od.orderNumber,SUM(od.quantityOrdered * od.priceEach) AS totalRevenue,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS totalProfit
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY od.orderNumber
ORDER BY totalProfit DESC,totalRevenue DESC;


-- TASK2_12 List all orders with detailed product information.
SELECT orderNumber,productCode,productName,productLine,productScale,productVendor,productDescription,quantityInStock,buyPrice,MSRP
from orderdetails join products using(productCode);

-- TASK2_13 Identify orders with delayed shipping (shippedDate > requiredDate).
-- Identify orders with delayed shipping
SELECT orderNumber from orders
where shippedDate>requiredDate;

-- TASK2_14 Find the most popular product combinations within orders.
select concat(od1.productcode, '-', od2.productcode) as productcombination,count(*) as combinationcount
from  orderdetails od1
join orderdetails od2 on od1.ordernumber = od2.ordernumber
where od1.productcode < od2.productcode
group by productcombination
order by combinationcount desc;


-- TASK2_15  Calculate revenue for each order and identify the top 10 most profitable
SELECT od.orderNumber,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS totalProfit
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY od.orderNumber
ORDER BY totalProfit DESC
LIMIT 10;

SELECT od.orderNumber,SUM(od.quantityOrdered * od.priceEach) AS totalRevenue,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS totalProfit
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY od.orderNumber
ORDER BY totalProfit DESC,totalRevenue DESC
limit 10;


-- TASK2_16
DELIMITER $$
CREATE TRIGGER after_order_insert
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    DECLARE orderTotal DECIMAL(10, 2);

    -- Calculate the total amount of the new order
    SELECT SUM(od.quantityOrdered * od.priceEach) 
    INTO orderTotal
    FROM orderdetails od
    WHERE od.orderNumber = NEW.orderNumber;

    -- Update the customer's credit limit
    UPDATE customers 
    SET creditLimit = creditLimit - orderTotal
    WHERE customerNumber = NEW.customerNumber;
END$$

DELIMITER ;











